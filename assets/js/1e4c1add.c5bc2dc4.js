"use strict";(self.webpackChunkoverreact_docs=self.webpackChunkoverreact_docs||[]).push([[713],{5162:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=s(5893),o=s(1151);const a={},r="useUpdate",i={id:"hooks/use-update",title:"useUpdate",description:"Register a callback function that will be invoked once per frame, whilst the game is not paused. It is responsible for updating some of the game state.",source:"@site/docs/hooks/use-update.md",sourceDirName:"hooks",slug:"/hooks/use-update",permalink:"/docs/hooks/use-update",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useTicker",permalink:"/docs/hooks/use-ticker"}},c={},l=[{value:"Example",id:"example",level:2},{value:"Using <code>delta</code>",id:"using-delta",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"useupdate",children:"useUpdate"}),"\n",(0,n.jsx)(t.p,{children:"Register a callback function that will be invoked once per frame, whilst the game is not paused. It is responsible for updating some of the game state."}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"// Update the player's position, based on their velocity.\nuseUpdate((delta) => {\n  pos.current[0] += velocity.current[0] * delta;\n  pos.current[1] += velocity.current[1] * delta;\n});\n"})}),"\n",(0,n.jsxs)(t.h2,{id:"using-delta",children:["Using ",(0,n.jsx)(t.code,{children:"delta"})]}),"\n",(0,n.jsxs)(t.p,{children:["In your update functions, it is important to think about when the ",(0,n.jsx)(t.code,{children:"delta"})," value should be used. It is the number of milliseconds that have elapsed since the previous frame, so on higher framerate devices it will be a smaller number."]}),"\n",(0,n.jsxs)(t.p,{children:["In the example above the player's velocity is being multiplied by ",(0,n.jsx)(t.code,{children:"delta"})," to ensure that the player's movement is agnostic of the framerate. Otherwise, on higher framerate devices, the player should run faster and jump higher!"]})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>i,a:()=>r});var n=s(7294);const o={},a=n.createContext(o);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkoverreact_docs=self.webpackChunkoverreact_docs||[]).push([[546],{1667:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=i(5893),s=i(1151);const o={sidebar_position:3},r="Event Handling",d={id:"guides/event-handling",title:"Event Handling",description:"Overview",source:"@site/docs/guides/event-handling.md",sourceDirName:"guides",slug:"/guides/event-handling",permalink:"/docs/guides/event-handling",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Properties",permalink:"/docs/guides/properties"},next:{title:"BitmapImage",permalink:"/docs/components/bitmap-image"}},a={},c=[{value:"Overview",id:"overview",level:2},{value:"Down vs pressed",id:"down-vs-pressed",level:2},{value:"Keyboard",id:"keyboard",level:2},{value:"Pointer",id:"pointer",level:2},{value:"Orientation and motion",id:"orientation-and-motion",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"event-handling",children:"Event Handling"}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["Another knock-on effect of the ",(0,t.jsx)(n.a,{href:"./game-loop",children:"game loop"})," is how you'll handle events, such as key presses, mouse clicks, and touch events."]}),"\n",(0,t.jsxs)(n.p,{children:["Traditionally, we write code that responds to ",(0,t.jsx)(n.em,{children:"changes in the state"})," of input devices. For, example, when a key is pressed down, and maybe again when that key is released. But in our update functions we want to query the ",(0,t.jsx)(n.em,{children:"current state"}),' of input devices, such as "is a key currently being hand down.']}),"\n",(0,t.jsxs)(n.p,{children:["We could achieve this by listening to both ",(0,t.jsx)(n.code,{children:"keydown"})," and ",(0,t.jsx)(n.code,{children:"keyup"})," events, then maintaining a list of all keys currently in the 'down' state. But since this is a common pattern, ",(0,t.jsx)(n.em,{children:"Overreact"})," takes care of it for us."]}),"\n",(0,t.jsx)(n.p,{children:"In the following example we're checking to see if the space bar is being held down, and if it is, the player blows bubbles!"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const { isKeyDown } = useKeyboard();\n\nuseUpdate(() => {\n  if (isKeyDown('Space')) {\n    fireBubbles();\n  }\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"down-vs-pressed",children:"Down vs pressed"}),"\n",(0,t.jsxs)(n.p,{children:["In the example above we used the ",(0,t.jsx)(n.code,{children:"isKeyDown"})," function to see whether a key is held down."]}),"\n",(0,t.jsx)(n.h2,{id:"keyboard",children:"Keyboard"}),"\n",(0,t.jsx)(n.p,{children:"Coming soon..."}),"\n",(0,t.jsx)(n.h2,{id:"pointer",children:"Pointer"}),"\n",(0,t.jsx)(n.p,{children:"Coming soon..."}),"\n",(0,t.jsx)(n.h2,{id:"orientation-and-motion",children:"Orientation and motion"}),"\n",(0,t.jsx)(n.p,{children:"Coming soon..."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>r});var t=i(7294);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);